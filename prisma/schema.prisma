// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String    @default("/user-placeholder.png")
  hashedPassword String?
  role           Role      @default(USER)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isOnline         Boolean   @default(false) // Tracks if user is currently online
  lastActive       DateTime? // Tracks the last time the user was active
  pushSubscription Json? // Store user's Web Push subscription object
  deviceReady      Boolean   @default(false) // Tracks whether the user registered their notification permissions

  // relations
  accounts  Account[]
  sessions  Session[]
  articles  Article[]
  comments  Comment[]
  services  Service[]
  requests  Request[]
  likes     Like[]
  views     View[]
  bookmarks Bookmark[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id String @id @default(cuid())

  // fields
  title     String
  slug      String @unique
  excerpt   String
  thumbnail String
  content   String
  images    File[]
  read      Int    @default(0)
  status    Status @default(DRAFT)

  // relations
  author    User       @relation(fields: [userId], references: [id])
  category  Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags      Tag[]
  comments  Comment[]
  likes     Like[]
  views     View[]
  bookmarks Bookmark[]

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations identifiers
  userId     String
  categoryId String

  @@unique([slug, id])
}

model Category {
  id String @id @default(cuid())

  // fields
  name  String
  slug  String  @unique
  image String?

  // relations
  articles Article[]
  services Service[]
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  parentId String?

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, id])
}

model Tag {
  id String @id @default(cuid())

  // fields
  name  String
  slug  String  @unique
  image String?

  // relations
  articles Article[]

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, id])
}

model Comment {
  id String @id @default(cuid())

  // fields
  content  String
  approved Boolean @default(false)

  // relations
  article Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes   Like[]
  parent  Comment?  @relation("replies", fields: [commentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("replies")
  service Service?  @relation(fields: [serviceId], references: [id])

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation identifiers
  articleId String?
  userId    String
  serviceId String?
  commentId String?
}

model Service {
  id String @id @default(cuid())

  // fields
  title     String
  slug      String    @unique
  excerpt   String
  thumbnail String
  images    File[]
  content   String
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    Status    @default(DRAFT)
  read      Int       @default(0)
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // relations 
  comments     Comment[]
  serviceItems ServiceItem[]
  likes        Like[]
  views        View[]
  bookmarks    Bookmark[]
  requests     Request[]

  // times
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  categoryId String?

  @@unique([slug, id])
}

model ServiceItem {
  id String @id @default(cuid())

  title       String
  description String
  price       Int
  discount    Int?
  service     Service @relation(fields: [serviceId], references: [id])

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceId String
}

model Menu {
  id String @id @default(cuid())

  name   String
  links  Link[]
  parent Menu?   @relation("MenuHierarchy", fields: [menuId], references: [id])
  menu   Menu[]  @relation("MenuHierarchy")
  menuId String?

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Link {
  id String @id @default(cuid())

  name String
  url  String
  menu Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuId    String
}

model Social {
  id String @id @default(cuid())

  name String
  url  String
  icon String

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id String @id @default(cuid())

  filename String @unique
  size     Int
  url      String @unique

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?
}

model Request {
  id String @id @default(cuid())

  // fields
  name          String
  email         String?
  phone         String
  notes         String?
  service       Service       @relation(fields: [serviceId], references: [id])
  expert        User          @relation(fields: [expertId], references: [id])
  status        RequestStatus @default(PENDING)
  requestedDate DateTime
  requestedTime String

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  expertId  String
}

model Like {
  id String @id @default(cuid())

  // relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relation identifiers
  userId    String
  articleId String?
  serviceId String?
  commentId String?

  @@unique([userId, articleId, serviceId, commentId])
}

model View {
  id String @id @default(cuid())

  // relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  // fields
  ipAddress String?
  userAgent String?

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relation identifiers
  userId    String?
  articleId String?
  serviceId String?

  @@unique([userId, articleId, serviceId, ipAddress])
}

model Bookmark {
  id String @id @default(cuid())

  // relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relation identifiers
  userId    String
  articleId String?
  serviceId String?

  @@unique([userId, articleId, serviceId])
}

enum Role {
  USER
  SUPERADMIN
  ADMIN
  EXPERT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}
