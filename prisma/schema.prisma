// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String    @default("/user-placeholder.png")
  hashedPassword String?
  role           Role      @default(USER)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isOnline         Boolean   @default(false) // Tracks if user is currently online
  lastActive       DateTime? // Tracks the last time the user was active
  pushSubscription Json? // Store user's Web Push subscription object
  deviceReady      Boolean   @default(false) // Tracks whether the user registered their notification permissions

  // relations
  accounts           Account[]
  sessions           Session[]
  articles           Article[] @relation("articleAuthor")
  likedArticles      Article[] @relation("likedArticles")
  bookmarkedArticles Article[] @relation("bookmarkedArticles")
  likedComments      Comment[] @relation("likedcomments")
  comments           Comment[]
  likedServices      Service[] @relation("likedServices")
  BookmarkedServices Service[] @relation("bookmarkedServices")
  services           Service[] @relation("serviceAuthor")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Article {
  id String @id @default(cuid())

  // fields
  title     String
  slug      String @unique
  excerpt   String
  thumbnail String
  content   String
  views     Int    @default(0)
  readTime  Int    @default(0)
  status    Status @default(DRAFT)

  // relations
  author    User      @relation("articleAuthor", fields: [userId], references: [id])
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags      Tag[]
  comments  Comment[]
  likes     User[]    @relation("likedArticles")
  bookmarks User[]    @relation("bookmarkedArticles")

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relatins identifiers
  userId     String
  categoryId String

  @@unique([slug, id])
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  id   String @id @default(cuid())
  // fields
  name String
  slug String @unique

  // relations
  articles Article[]

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, id])
}

model Tag {
  id String @id @default(cuid())

  // fields
  name String
  slug String @unique

  // relations
  Article Article[]

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, id])
}

model Comment {
  id String @id @default(cuid())

  // fields
  content  String
  approved Boolean @default(false)

  // relations
  article Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes   User[]    @relation("likedcomments")
  parent  Comment?  @relation("replies", fields: [commentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("replies")
  service Service?  @relation(fields: [serviceId], references: [id])

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation identifiers
  articleId String
  userId    String
  serviceId String?
  commentId String?
}

model Service {
  id String @id @default(cuid())

  // fields
  title     String
  slug      String @unique
  excerpt   String
  thumbnail String
  content   String
  views     Int    @default(0)
  author    User   @relation("serviceAuthor", fields: [userId], references: [id], onDelete: Cascade)
  status    Status @default(DRAFT)
  readTime  Int    @default(0)

  // relations 
  comments  Comment[]
  likes     User[]    @relation("likedServices")
  bookmarks User[]    @relation("bookmarkedServices")

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  @@unique([slug, id])
}

model Menu {
  id String @id @default(cuid())

  name   String
  links  Link[]
  parent Menu?   @relation("MenuHierarchy", fields: [menuId], references: [id])
  Menu   Menu[]  @relation("MenuHierarchy")
  menuId String?

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Link {
  id String @id @default(cuid())

  name String
  url  String
  menu Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuId    String
}

model Social {
  id String @id @default(cuid())

  name String
  url  String
  icon String

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id String @id @default(cuid())

  filename String
  size     Int
  url      String @unique

  // times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
